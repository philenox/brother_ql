#!/usr/bin/env python3
"""
Brother QL-600 CUPS Backend

Setup Instructions:
1. Create a virtual environment:
   python3 -m venv venv

2. Activate the virtual environment:
   source venv/bin/activate

3. Install dependencies:
   pip install -r requirements.txt

4. Make this script executable:
   chmod +x brotherql600

5. Create a symlink to this script in the CUPS backend directory:
   sudo ln -s /path/to/this/brotherql600 /usr/lib/cups/backend/brotherql600

6. Restart CUPS:
   sudo systemctl restart cups

Note: When running as a CUPS backend, this script will use the Python interpreter
from the virtual environment specified in the shebang line above.
"""

import sys
import os
import logging
import glob
from pdf2image import convert_from_bytes


# Ensure we're using the virtualenv's Python interpreter
VENV_PYTHON = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'venv/bin/python3')
if sys.executable != VENV_PYTHON:
    os.execv(VENV_PYTHON, [VENV_PYTHON] + sys.argv)

from brother_ql.raster import BrotherQLRaster
from brother_ql.conversion import convert
from brother_ql.backends.helpers import send
from PIL import Image

def find_printer_device():
    """Find the device path for the Brother QL-600 printer"""
    # Look for USB printer devices
    paths = glob.glob('/dev/usb/lp*')
    if not paths:
        return None
    # For now, return the first printer device found
    # TODO: Add proper USB ID checking to find the specific QL-600
    return f"file://{paths[0]}", paths[0]

def list_device():
    # CUPS expects a tab-delimited line: "device-uri\tprinter-info\tmake-and-model"
    device_path, device_uri = find_printer_device()
    if device_path:
        print("brotherql600\tbrotherql600:/dev/usb/lp0\t\"Brother QL-600\"\t\"Brother QL-600 (custom backend)\"")
    else:
        logging.error("No printer device found")
    
def process_job(device_uri, user, job_id, job_title, copies, options, image_data):
    # check if file path is provided or file handle is provided

    # Log the job details
    logging.info(f"Received job {job_id} from {user}: {job_title}")
    
    try:
        # Create a BrotherQLRaster instance for QL-600
        qlr = BrotherQLRaster('QL-600')
        qlr.exception_on_warning = True
        
        # Convert the image to printer instructions
        # Using standard label size 62mm endless - adjust as needed
        instructions = convert(
            qlr=qlr,
            images=[image_data],
            label='62',  # 62mm endless label
            rotate='auto',
            threshold=70,
            dither=False,
            compress=True,
            cut=True
        )
            
        # If device_uri starts with usb://, convert it to the correct format
        if device_uri.startswith('usb://'):
            device_uri, device_path = find_printer_device()
            if not device_uri:
                raise Exception("Could not find printer device")
            
        # Send the instructions to the printer
        send(
            instructions=instructions,
            printer_identifier=device_uri,
            backend_identifier='linux_kernel',
            blocking=True
        )
        
        logging.info("Job processed successfully")
        return 0  # success exit code for CUPS backends
    except Exception as e:
        logging.error(f"Error processing job: {e}")
        return 1  # non-zero signals failure

def main():
    argc = len(sys.argv)
    # If no arguments are provided, assume listing mode.
    if len(argc) == 1:
        list_device()
        sys.exit(0)
    
    # CUPS calls the backend with at least 7 arguments:
    # argv[0]: path to backend
    # argv[1]: device-uri (if in list mode, this is ignored)
    # argv[2]: user
    # argv[3]: job-id
    # argv[4]: job title
    # argv[5]: number of copies
    # argv[6]: options (e.g., resolution, media type)
    # argv[7]: path to the print file (optional, if not provided, input is read from stdin)

    # If no file path is provided, read from stdin
    elif argc == 8:
        logging.error("Reading from stdin")
        device_uri, user, job_id, job_title, copies, options = sys.argv[1:7]
        logging.info("Reading print job data from standard input")
        job_data = sys.stdin.buffer.read()
        image_data = convert_from_bytes(job_data)
        sys.exit(1)

    # If a file path is provided, read from the file
    elif argc >= 8:
        device_uri, user, job_id, job_title, copies, options, file_path = sys.argv[1:8]
        logging.info("Reading print job data from file" + file_path)
        with Image.open(file_path) as im:
            image_data = im
    
    # If any other number of arguments are provided, error
    else:
        logging.error("Not enough arguments provided to backend: " + str(argc))
        sys.exit(1)

    exit_code = process_job(device_uri, user, job_id, job_title, copies, options, image_data)
    sys.exit(exit_code)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    main()
